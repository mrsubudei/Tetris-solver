package src

type Shape struct {
	x1 int // y for raw
	y1 int // x for column
	x2 int
	y2 int
	x3 int
	y3 int
	x4 int
	y4 int
}

func CheckValid(s string) (bool, int) {
	tMap := map[int]string{
		1:   "#...#...#...#...",
		2:   ".#...#...#...#..",
		3:   "..#...#...#...#.",
		4:   "...#...#...#...#",
		5:   "####............",
		6:   "....####........",
		7:   "........####....",
		8:   "............####",
		9:   "##..##..........",
		10:  ".##..##.........",
		11:  "..##..##........",
		12:  "....##..##......",
		13:  ".....##..##.....",
		14:  "......##..##....",
		15:  "........##..##..",
		16:  ".........##..##.",
		17:  "..........##..##",
		18:  "#...#...##......",
		19:  ".#...#...##.....",
		20:  "..#...#...##....",
		21:  "....#...#...##..",
		22:  ".....#...#...##.",
		23:  "......#...#...##",
		24:  "###.#...........",
		25:  ".###.#..........",
		26:  "....###.#.......",
		27:  ".....###.#......",
		28:  "........###.#...",
		29:  ".........###.#..",
		30:  "##...#...#......",
		31:  ".##...#...#.....",
		32:  "..##...#...#....",
		33:  "....##...#...#..",
		34:  ".....##...#...#.",
		35:  "......##...#...#",
		36:  "..#.###.........",
		37:  "...#.###........",
		38:  "......#.###.....",
		39:  ".......#.###....",
		40:  "..........#.###.",
		41:  "...........#.###",
		42:  ".#...#..##......",
		43:  "..#...#..##.....",
		44:  "...#...#..##....",
		45:  ".....#...#..##..",
		46:  "......#...#..##.",
		47:  ".......#...#..##",
		48:  "#...###.........",
		49:  ".#...###........",
		50:  "....#...###.....",
		51:  ".....#...###....",
		52:  "........#...###.",
		53:  ".........#...###",
		54:  "##..#...#.......",
		55:  ".##..#...#......",
		56:  "..##..#...#.....",
		57:  "....##..#...#...",
		58:  ".....##..#...#..",
		59:  "......##..#...#.",
		60:  "###...#.........",
		61:  ".###...#........",
		62:  "....###...#.....",
		63:  ".....###...#....",
		64:  "........###...#.",
		65:  ".........###...#",
		66:  ".##.##..........",
		67:  "..##.##.........",
		68:  ".....##.##......",
		69:  "......##.##.....",
		70:  ".........##.##..",
		71:  "..........##.##.",
		72:  "#...##...#......",
		73:  ".#...##...#.....",
		74:  "..#...##...#....",
		75:  "....#...##...#..",
		76:  ".....#...##...#.",
		77:  "......#...##...#",
		78:  "##...##.........",
		79:  ".##...##........",
		80:  "....##...##.....",
		81:  ".....##...##....",
		82:  "........##...##.",
		83:  ".........##...##",
		84:  ".#..##..#.......",
		85:  "..#..##..#......",
		86:  "...#..##..#.....",
		87:  ".....#..##..#...",
		88:  "......#..##..#..",
		89:  ".......#..##..#.",
		90:  ".#..###.........",
		91:  "..#..###........",
		92:  ".....#..###.....",
		93:  "......#..###....",
		94:  ".........#..###.",
		95:  "..........#..###",
		96:  "#...##..#.......",
		97:  ".#...##..#......",
		98:  "..#...##..#.....",
		99:  "....#...##..#...",
		100: ".....#...##..#..",
		101: "......#...##..#.",
		102: "###..#..........",
		103: ".###..#.........",
		104: "....###..#......",
		105: ".....###..#.....",
		106: "........###..#..",
		107: ".........###..#.",
		108: ".#..##...#......",
		109: "..#..##...#.....",
		110: "...#..##...#....",
		111: ".....#..##...#..",
		112: "......#..##...#.",
		113: ".......#..##...#",
	}

	valid := false
	pos := 0
	for i, v := range tMap {
		if s == v {
			valid = true
			switch {
			case i >= 1 && i <= 4:
				pos = 1
			case i >= 5 && i <= 8:
				pos = 2
			case i >= 9 && i <= 17:
				pos = 3
			case i >= 18 && i <= 23:
				pos = 4
			case i >= 24 && i <= 29:
				pos = 5
			case i >= 30 && i <= 35:
				pos = 6
			case i >= 36 && i <= 41:
				pos = 7
			case i >= 42 && i <= 47:
				pos = 8
			case i >= 48 && i <= 53:
				pos = 9
			case i >= 54 && i <= 59:
				pos = 10
			case i >= 60 && i <= 65:
				pos = 11
			case i >= 66 && i <= 71:
				pos = 12
			case i >= 72 && i <= 77:
				pos = 13
			case i >= 78 && i <= 83:
				pos = 14
			case i >= 84 && i <= 89:
				pos = 15
			case i >= 90 && i <= 95:
				pos = 16
			case i >= 96 && i <= 101:
				pos = 17
			case i >= 102 && i <= 107:
				pos = 18
			case i >= 108 && i <= 113:
				pos = 19
			}
		}
	}
	return valid, pos
}

func GetShape(n int) Shape {
	shape := Shape{}
	switch n {
	case 1:
		shape.x1 = 0
		shape.y1 = 0
		shape.x2 = 1
		shape.y2 = 0
		shape.x3 = 2
		shape.y3 = 0
		shape.x4 = 3
		shape.y4 = 0
	case 2:
		shape.x1 = 0
		shape.y1 = 0
		shape.x2 = 0
		shape.y2 = 1
		shape.x3 = 0
		shape.y3 = 2
		shape.x4 = 0
		shape.y4 = 3
	case 3:
		shape.x1 = 0
		shape.y1 = 0
		shape.x2 = 0
		shape.y2 = 1
		shape.x3 = 1
		shape.y3 = 0
		shape.x4 = 1
		shape.y4 = 1
	case 4:
		shape.x1 = 0
		shape.y1 = 0
		shape.x2 = 1
		shape.y2 = 0
		shape.x3 = 2
		shape.y3 = 0
		shape.x4 = 2
		shape.y4 = 1
	case 5:
		shape.x1 = 0
		shape.y1 = 0
		shape.x2 = 0
		shape.y2 = 1
		shape.x3 = 0
		shape.y3 = 2
		shape.x4 = 1
		shape.y4 = 0
	case 6:
		shape.x1 = 0
		shape.y1 = 0
		shape.x2 = 0
		shape.y2 = 1
		shape.x3 = 1
		shape.y3 = 1
		shape.x4 = 2
		shape.y4 = 1
	case 7:
		shape.x1 = 0
		shape.y1 = 2
		shape.x2 = 1
		shape.y2 = 0
		shape.x3 = 1
		shape.y3 = 1
		shape.x4 = 1
		shape.y4 = 2
	case 8:
		shape.x1 = 0
		shape.y1 = 1
		shape.x2 = 1
		shape.y2 = 1
		shape.x3 = 2
		shape.y3 = 0
		shape.x4 = 2
		shape.y4 = 1
	case 9:
		shape.x1 = 0
		shape.y1 = 0
		shape.x2 = 1
		shape.y2 = 0
		shape.x3 = 1
		shape.y3 = 1
		shape.x4 = 1
		shape.y4 = 2
	case 10:
		shape.x1 = 0
		shape.y1 = 0
		shape.x2 = 0
		shape.y2 = 1
		shape.x3 = 1
		shape.y3 = 0
		shape.x4 = 2
		shape.y4 = 0
	case 11:
		shape.x1 = 0
		shape.y1 = 0
		shape.x2 = 0
		shape.y2 = 1
		shape.x3 = 0
		shape.y3 = 2
		shape.x4 = 1
		shape.y4 = 2
	case 12:
		shape.x1 = 0
		shape.y1 = 1
		shape.x2 = 0
		shape.y2 = 2
		shape.x3 = 1
		shape.y3 = 0
		shape.x4 = 1
		shape.y4 = 1
	case 13:
		shape.x1 = 0
		shape.y1 = 0
		shape.x2 = 1
		shape.y2 = 0
		shape.x3 = 1
		shape.y3 = 1
		shape.x4 = 2
		shape.y4 = 1
	case 14:
		shape.x1 = 0
		shape.y1 = 0
		shape.x2 = 0
		shape.y2 = 1
		shape.x3 = 1
		shape.y3 = 1
		shape.x4 = 1
		shape.y4 = 2
	case 15:
		shape.x1 = 0
		shape.y1 = 1
		shape.x2 = 1
		shape.y2 = 0
		shape.x3 = 1
		shape.y3 = 1
		shape.x4 = 2
		shape.y4 = 0
	case 16:
		shape.x1 = 0
		shape.y1 = 1
		shape.x2 = 1
		shape.y2 = 0
		shape.x3 = 1
		shape.y3 = 1
		shape.x4 = 1
		shape.y4 = 2
	case 17:
		shape.x1 = 0
		shape.y1 = 0
		shape.x2 = 1
		shape.y2 = 0
		shape.x3 = 1
		shape.y3 = 1
		shape.x4 = 2
		shape.y4 = 0
	case 18:
		shape.x1 = 0
		shape.y1 = 0
		shape.x2 = 0
		shape.y2 = 1
		shape.x3 = 0
		shape.y3 = 2
		shape.x4 = 1
		shape.y4 = 1
	case 19:
		shape.x1 = 0
		shape.y1 = 1
		shape.x2 = 1
		shape.y2 = 0
		shape.x3 = 1
		shape.y3 = 1
		shape.x4 = 2
		shape.y4 = 1
	}
	return shape
}
